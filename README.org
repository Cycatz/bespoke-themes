Custom medium contrast light and dark themes for Emacs (intended for GUI only, though
basic support in terminal has been added). This started as a fork of [[https://github.com/rougier][Nicolas
Rougier's]] work on [[https://github.com/rougier/elegant-emacs][elegant-emacs]] and [[https://github.com/rougier/nano-emacs][nano-emacs]], but has evolved with some ideas and
colors borrowed from [[https://material.io/design/color/the-color-system.html#color-theme-creation][material colors]], [[https://github.com/bbatsov/solarized-emacs][solarized]] and [[https://github.com/arcticicestudio/nord-emacs][nord]].

One of the aims of the theme is to bring much of what is good about the nano-emacs
distro into standard theme formatting, so that it can be set just like any other
theme. The theme is notably less conservative/minimal than nano-emacs (or elegant
emacs), in the sense that it has a broader color palette and sets fewer configuration
conditions on fonts and ui elements, but bespoke-themes otherwise shares many of its
colors and themeing ideas with the good work done by Rougier (see also his work on [[https://arxiv.org/abs/2008.06030][on
the design of text editors]]). 

Faces are fairly (though note totally!) comprehensive, including (optional) evil
cursor colors. I'm trying to add faces on a regular basis.

*** Options

- There is an optional custom mode line, which may be set as a header line (as in
  nano-emacs), or as the normal footer line, or the theme can make marely cosmetic
  changes (see the options for the =(bespoke-set-mode-line)= variable.
- You can set italics for keywords or for comments (or both).
- You can set variable-pitch for headlines using =(bespoke-set-variable-pitch)=.
- There is a toggle function for toggling between light and dark theme variants:
  =(bespoke/toggle-theme)=.
- There is a useful footer line visual alert "bell" inspired by [[https://github.com/hlissner/doom-emacs][DOOM emacs]]. To use
  include =(setq bespoke-set-visual-bell t)= in your setup of the theme.
- All options are available via =customize-group=, and can also be found in the =bespoke-themes.el= file.

  
*NOTE*: It is early days for this theme, so there may be fairly significant changes
made in various commits. Suggestions and pull requests are welcome!

*** Settings
Here's one possible way of setting up the theme. Note that since this theme is
currently not on Melpa the [[https://github.com/jwiegley/use-package][use-package]] setup below utilizes [[https://github.com/raxod502/straight.el][straight]] to install
packages, but you can of course install it from this repo however you wish.

#+begin_src emacs-lisp
(use-package bespoke-themes
  :straight (:host github :repo "mclear-tools/bespoke-themes" :branch "master")
  :config
  ;; Set header line
  (setq bespoke-set-mode-line 'header)
  ;; Set evil cursor colors
  (setq bespoke-set-evil-cursors t)
  ;; Use mode line visual bell
  (setq bespoke-set-visual-bell t)
  ;; Set use of italics
  (setq bespoke-set-italic-comments t
        bespoke-set-italic-keywords t)
  ;; Set variable pitch
  (setq bespoke-set-variable-pitch t)
    ;; Set initial theme variant
  (setq bespoke-set-theme 'dark)
  ;; Load theme
  (load-theme 'bespoke t))
#+end_src

To get windows to divide in the manner seen in the screenshots use the following setting:

#+begin_src emacs-lisp
;; Vertical window divider
(use-package frame
  :straight (:type built-in)
  :custom
  (window-divider-default-right-width 12)
  (window-divider-default-bottom-width 1)
  (window-divider-default-places 'right-only)
  (window-divider-mode t))
;; Make sure new frames use window-divider
(add-hook 'before-make-frame-hook 'window-divider-mode)

#+end_src

For the padding in frame used in the screenshots try the following settings:
#+begin_src emacs-lisp
(use-package frame
  :straight (:type built-in)
  :config
  ;; Make a clean & minimalist frame
  (setq-default default-frame-alist
                (append (list
                '(font . "SF Mono:style=medium:size=15") ;; NOTE: substitute whatever font you prefer here
                '(internal-border-width . 20)
                '(left-fringe    . 0)
                '(right-fringe   . 0)
                '(tool-bar-lines . 0)
                '(menu-bar-lines . 0)
                '(vertical-scroll-bars . nil))))
  (setq-default window-resize-pixelwise t)
  (setq-default frame-resize-pixelwise t)
#+end_src

To get a splash screen see Rougier's [[https://github.com/rougier/emacs-splash][splash.el]]. You can see my customization of it [[https://github.com/mclear-tools/dotemacs/blob/master/setup-config/setup-splash.el][here]].

*** Screenshots:

#+BEGIN_HTML
<div>
<img src="./screenshots/light-splash.png"/>
<img src="./screenshots/light-colors.png"/>
<img src="./screenshots/light-git.png"/>
<img src="./screenshots/light-agenda.png"/>
<img src="./screenshots/light-dired.png"/>

<img src="./screenshots/dark-splash.png" />
<img src="./screenshots/dark-colors.png" />
<img src="./screenshots/dark-git.png" />
<img src="./screenshots/dark-agenda.png" />
<img src="./screenshots/dark-dired.png" />

</div>
#+END_HTML
